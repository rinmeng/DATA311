set.seed(51940633)
# count half of the rows
sampleSize <- floor(0.5 * nrow(abalone))
# split rows into 2 sets
set <- sample(seq_len(nrow(abalone)), size = sampleSize)
abaloneTrain <- abalone[set, ]
abaloneTest <- abalone[-set, ]
abaloneTrain
abaloneTest
abaloneTrain.lm <- lm(X15 ~ X0.455,data=abaloneTrain)
summary(abaloneTrain.lm)
plot(abaloneTrain$X0.455, abaloneTrain$X15, xlab="Abalone length (mm)", ylab="Abalone rings",
pch=16,cex=0.3, main = "Scatter plot of rings vs length")
abline(abaloneTrain.lm, col = "red")
plot(abaloneTrain.lm, which = 2, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 3, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 1, pch=16, cex=0.3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
plot(abaloneTrain.lm2$residuals, type="p", main="Residuals vs Order of Observations", xlab="Order of Observations", ylab="Residuals")
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
plot(abaloneTrain.lm2$residuals, type="p", main="Residuals vs Order of Observations", xlab="Order of Observations", ylab="Residuals", pch=16, cex=0.3)
abaloneTrain.lm3 <- lm(X15 ~ X0.455 + M, data=abaloneTrain)
summary(abaloneTrain.lm3)
abaloneTrain.lm3 <- lm(X15 ~ X0.455 + M, data=abaloneTrain)
str(abaloneTrain.lm3)
summary(abaloneTrain.lm3)
abaloneTrain.lm3 <- lm(X15 ~ X0.455 + M, data=abaloneTrain)
summary(abaloneTrain.lm3)
abalone <- read.csv(("abalone.data"))
str(abalone)
hist(abalone$X15, xlab = "Abalone age",breaks=30 , ylab = "Abalone count", main = "Histogram of abalone count vs abalone age")
set.seed(51940633)
# count half of the rows
sampleSize <- floor(0.5 * nrow(abalone))
# split rows into 2 sets
set <- sample(seq_len(nrow(abalone)), size = sampleSize)
abaloneTrain <- abalone[set, ]
abaloneTest <- abalone[-set, ]
abaloneTrain
abaloneTest
abaloneTrain.lm <- lm(X15 ~ X0.455,data=abaloneTrain)
summary(abaloneTrain.lm)
plot(abaloneTrain$X0.455, abaloneTrain$X15, xlab="Abalone length (mm)", ylab="Abalone rings",
pch=16,cex=0.3, main = "Scatter plot of rings vs length")
abline(abaloneTrain.lm, col = "red")
plot(abaloneTrain.lm2, which = 2, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 3, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 1, pch=16, cex=0.3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
abaloneTrain.lm3 <- lm(X15 ~ X0.455 + M, data=abaloneTrain)
summary(abaloneTrain.lm3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
plot(abaloneTrain.lm2, which = 2, pch=16, cex=0.3)
plot(abaloneTrain.lm2, which = 3, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 2, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 3, pch=16, cex=0.3)
setwd("C:/Users/agarp/DATA311")
setwd("C:/Users/agarp/DATA311/a1")
abaloneTrain.3withWholeWeight <- lm(X15 ~ X0.455 + M + X0.514, data=abaloneTrain)
abaloneTrain.forward <- step(initial_model, scope = list(lower = abaloneTrain.3, upper = abaloneTrain.3withWholeWeight), direction = "forward")
abaloneTrain.3withWholeWeight <- lm(X15 ~ X0.455 + M + X0.514, data=abaloneTrain)
abaloneTrain.forward <- step(initial_model, scope = list(lower = abaloneTrain.3, upper = abaloneTrain.3withWholeWeight), direction = "forward")
abaloneTrain.3withWholeWeight <- lm(X15 ~ X0.455 + M + X0.514, data=abaloneTrain)
abaloneTrain.forward <- step(abaloneTrain.3, scope = list(lower = abaloneTrain.3, upper = abaloneTrain.3withWholeWeight), direction = "forward")
abaloneTrain.lm3withWholeWeight <- lm(X15 ~ X0.455 + M + X0.514, data=abaloneTrain)
abaloneTrain.forward <- step(abaloneTrain.lm3, scope = list(lower = abaloneTrain.lm3, upper = abaloneTrain.3withWholeWeight), direction = "forward")
summary(abaloneTrain.forward)
abaloneTrain.lm3withWholeWeight <- lm(X15 ~ X0.455 + M + X0.514, data=abaloneTrain)
abaloneTrain.forward <- step(abaloneTrain.lm3, scope = list(lower = abaloneTrain.lm3, upper = abaloneTrain.lm3withWholeWeight), direction = "forward")
summary(abaloneTrain.forward)
abalone <- read.csv(("abalone.data"))
str(abalone)
hist(abalone$X15, xlab = "Abalone age",breaks=30 , ylab = "Abalone count", main = "Histogram of abalone count vs abalone age")
set.seed(51940633)
# count half of the rows
sampleSize <- floor(0.5 * nrow(abalone))
# split rows into 2 sets
set <- sample(seq_len(nrow(abalone)), size = sampleSize)
abaloneTrain <- abalone[set, ]
abaloneTest <- abalone[-set, ]
abaloneTrain
abaloneTest
abaloneTrain.lm <- lm(X15 ~ X0.455,data=abaloneTrain)
summary(abaloneTrain.lm)
plot(abaloneTrain$X0.455, abaloneTrain$X15, xlab="Abalone length (mm)", ylab="Abalone rings",
pch=16,cex=0.3, main = "Scatter plot of rings vs length")
abline(abaloneTrain.lm, col = "red")
plot(abaloneTrain.lm, which = 2, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 3, pch=16, cex=0.3)
plot(abaloneTrain.lm, which = 1, pch=16, cex=0.3)
abaloneTrain.lm2 <- lm(X15 ~ X0.455 + I(X0.455^2), data=abaloneTrain)
summary(abaloneTrain.lm2)
plot(abaloneTrain.lm2, pch=16, cex=0.3)
abaloneTrain.lm3 <- lm(X15 ~ X0.455 + M, data=abaloneTrain)
summary(abaloneTrain.lm3)
cor(abaloneTrain)
cor(numeric(abaloneTrain))
numeric_columns <- sapply(abalone, is.numeric)
cor_matrix <- cor(abalone[, numeric_columns])
print(cor_matrix)
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
corTable
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(cor_matrix) <- NA
corTable
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(cor_matrix) <- NA
corTable
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(corTable) <- NA
corTable
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(corTable) <- NA
corTable
maxCor <- max(corTable, na.rm = TRUE)
maxCor
maxCorIndex <- which(cor_matrix == corTable, arr.ind = TRUE)
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(corTable) <- NA
corTable
maxCor <- max(corTable, na.rm = TRUE)
maxCor
maxCorIndex <- which(cor_matrix == corTable, arr.ind = TRUE)
maxCorIndex
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(corTable) <- NA
maxCor <- max(corTable, na.rm = TRUE)
maxCorIndex <- which(corTable == maxCor, arr.ind = TRUE)
corTable
maxCor
maxCorIndex
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
plot(abaloneTrain.lm4)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
plot(abaloneTrain.lm4, pch = 16, cex=0.3)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
summary(abaloneTrain.lm4)
abaloneTrain.lm4 <- lm(X15 ~ X0.455 + X0.514, data=abaloneTrain)
summary(abaloneTrain.lm4)
abaloneTrain.lm5 <- lm(X15 ~ X0.455 * X0.514, data = abaloneTrain)
summary(interaction_model)
interactionModel <- lm(X15 ~ X0.455 * X0.514, data = abaloneTrain)
summary(interactionModel)
multipleRegression <- lm (X15 ~ ., data = abaloneTrain)
summary(multipleRegression)
myModel <- lm(X15 ~ MI + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ (M='I') + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ (M='I') + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(updated_model)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ MI + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ MI + MM + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ MI + MM + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~  X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 , data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M  + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245  + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 5 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514  + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095  + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365  + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.455 + X0.365 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ MI + MM + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
# Create interaction terms and polynomial features
abaloneTrain$Interaction1 <- abaloneTrain$X0.365 * abaloneTrain$X0.514
abaloneTrain$X0.365_sq <- abaloneTrain$X0.365^2
# Fit the updated model
updated_model <- lm(X15 ~ MI + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15 + Interaction1 + X0.365_sq, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
# Create interaction terms and polynomial features
abaloneTrain$Interaction1 <- abaloneTrain$X0.365 * abaloneTrain$X0.514
abaloneTrain$X0.365_sq <- abaloneTrain$X0.365^2
# Fit the updated model
updated_model <- lm(X15 ~ MI + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15 + Interaction1 + X0.365_sq, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
# Create interaction terms and polynomial features
abaloneTrain$Interaction1 <- abaloneTrain$X0.365 * abaloneTrain$X0.514
abaloneTrain$X0.365_sq <- abaloneTrain$X0.365^2
# Fit the updated model
updated_model <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15 + Interaction1 + X0.365_sq, data = abaloneTrain)
summary(updated_model)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M  + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.M <- [abaloneTrain$M = "",]
abaloneTrain.M <- [abaloneTrain$M == "M",]
abaloneTrain.M <- abaloneTrain[abaloneTrain$M == "M", ]
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
levels(abaloneTrain$M)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
levels(abaloneTrain$M)
abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
levels(abaloneTrain$M)
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
abaloneTrain
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
abaloneTrain
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
abaloneTrain
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
levels(abaloneTrain$M)
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
abaloneTrain.M$M <- as.factor(abaloneTrain.M$M)
levels(abaloneTrain.M$M)
# abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
#
# myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
# summary(myModel)
# plot(myModel, pch = 16, cex=0.3)
abaloneTrain.M$M <- as.factor(abaloneTrain.M$I)
abaloneTrain.I <- abaloneTrain[abaloneTrain$I == "I", ]
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.M$M <- as.factor(abaloneTrain.M$I)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.M)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
abaloneTrain.I
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "M", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "F", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
abaloneTrain.I <- abaloneTrain[abaloneTrain$M == "I", ]
abaloneTrain.I$M <- as.factor(abaloneTrain.I$M)
myModel <- lm(X15 ~ X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain.I)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
myModel <- lm(X15 ~ M X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
myModel <- lm(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain)
summary(myModel)
plot(myModel, pch = 16, cex=0.3)
abalone <- read.csv(("abalone.data"))
str(abalone)
hist(abalone$X15, xlab = "Abalone age",breaks=30 , ylab = "Abalone count", main = "Histogram of abalone count vs abalone age")
abalone <- read.csv(("abalone.data"))
abalone$M <- as.factor(abalone$M)
str(abalone)
hist(abalone$X15, xlab = "Abalone age",breaks=30 , ylab = "Abalone count", main = "Histogram of abalone count vs abalone age")
abaloneTrain.lm$sigma
summary(abaloneTrain.lm)$sigma
r print(mean(predict(abaloneTrain.lm,newdata=abaloneTest)-abalone$X15)^2)
print(mean(predict(abaloneTrain.lm,newdata=abaloneTest)-abalone$X15)^2)
print(mean(predict(abaloneTrain.lm,newdata=abaloneTest)-abaloneTrain$X15)^2)
print(mean(predict(abaloneTrain.lm,newdata=abaloneTest)-abaloneTest$X15)^2)
mean((predict(abaloneTrain.lm, newdata = abaloneTest) - abaloneTest$X15)^2)
library(caret)
install.packages(caret)
library(caret)
install.packages("caret")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(Rings ~ Length, data = train_data, k = k)
yhat = predict(kmod, test_data)
knn_mse_test[k] = mean((test_data$Rings - yhat)^2)
}
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(Rings ~ Length, data = train_data, k = k)
yhat = predict(kmod, test_data)
knn_mse_test[k] = mean((test_data$Rings - yhat)^2)
}
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(Rings ~ Length, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$Rings - yhat)^2)
}
summary(abalone)
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
print(abalone)
abalone
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(1,. 10, 50, 100, 200, 300)){
library(caret)
knn_mse_test = NULL
for (k in c(1, 10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300,450)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300,350)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ M + X0.365 + X0.095 + X0.514 + X0.2245 + X0.101 + X0.15, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(X15 ~ X0.455, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$X0.455 - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
